#! /usr/bin/python2.7
import re
import string
import socket
import sys
import urlparse
import time
import Queue

Useragent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 Safari/537.36'
CRLF = '\r\n'  #need to add to end of every line 
username = '001777115'
password = '9NXCJQNN'
secretFlagMatch = 'FLAG: (.*)</h2><h2>'


if len(sys.argv)>=1:
	username = sys.argv[1]
 	password = sys.argv[2]


class Cookie:
	def __init__(self):
		self.csrftoken = ''
		self.sessionid = ''
		self.isCookie = 0
	def getCoockie(self):
		CookieContent = "csrftoken="+self.csrftoken+"; sessionid="+self.sessionid
		return CookieContent
	def setCookie(self,csrftoken,sessionid):
		self.csrftoken = csrftoken
		self.sessionid = sessionid
		return

def get(sock, url,Cookie):
	url = urlparse.urlparse(url)
	host = url.netloc
	if url.path == '':
		path = '/'
	path = url.path
	HTTP_Protocol = 'GET '+path+' HTTP/1.1'
	CookieStr = ''
	if Cookie.isCookie:
		CookieStr = Cookie.getCoockie()
	Request_Header = [
		HTTP_Protocol,
		"Host: "+host,
		"Connection: keep-alive",
		"Cache-Control: max-age=0",
		"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
		"Referer: http://cs5700sp16.ccs.neu.edu/",
		"Upgrade-Insecure-Requests: 1",
		"User-Agent: "+Useragent,
		"DNT: 1",
		"Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6",
		"Cookie: "+CookieStr,
		"",
		"",
	]
	Request = CRLF.join(Request_Header)
	sock.sendall(Request)
	return

def post(sock,url,postdata,getdata,Cookie):
	datalength = len(postdata)
	CookieStr = ''
	if Cookie.isCookie:
		CookieStr = Cookie.getCoockie()
	Request_Header = [
		"POST /accounts/login/?next=/fakebook/ HTTP/1.1",
		"Host: cs5700sp16.ccs.neu.edu",
		"Connection: keep-alive",
		"User-Agent: "+Useragent,
		"Content-Length: " + str(datalength), 
		"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
		"Accept-Language: en-US,en;q=0.8,zh-CN;q=0.6",
		"Referer: http://cs5700sp16.ccs.neu.edu/accounts/login?next=/fakebook/",
		"Content-Type: application/x-www-form-urlencoded",
		"Cache-Control: max-age=0",
		"Origin: http://cs5700sp16.ccs.neu.edu",
		"Upgrade-Insecure-Requests: 1",
		"Cookie: "+CookieStr,
		"",
		"",
	]
	Request = CRLF.join(Request_Header) + postdata
	sock.sendall(Request)
	return


def getcsrftoken(responsedata):
	patternstr = "Set-Cookie: csrftoken=(.*); expires="
	pattern = re.compile(patternstr)
	csrftoken = re.findall(pattern, responsedata)
	return csrftoken[0]


def getsessionid(responsedata):
	patternstr = "Set-Cookie: sessionid=(.*); expires="
	pattern = re.compile(patternstr)
	sessionid = re.findall(pattern, responsedata)
	return sessionid[0]

def createSocket():
	host = "cs5700sp16.ccs.neu.edu"
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((host,80))
	# sock.settimeout(10)
	return sock

def isNorm(data):
	if(len(data)<12):
		return False
	elif(data[9:12] == "200"):
		return True
	else:
		return False

def is500(data):
	if(data[9:12] == "200"):
		return True
	else:
		return False

def is403error(data):
	if(data[9:12] == "403"):
		return True
	else:
		return False

def is302error(data):
	Location =''
	if(data[9:12] == "302"):
		patternstr = "Location: (.*)\r\n"
		pattern = re.compile(patternstr)
		Location = re.findall(pattern, data)
	else:
		return False
	return Location[0]

def cutChunkNum(data):
	pos = data.rfind("\r\n\r\n")
	return data[:pos]

def getChunkNum(data):
	pos = data.find("\r\n\r\n") + 4
	return str(data[pos:])

def RecvData(sock):
	Response =''
	ResponseHeader = sock.recv(4096)
	Response += ResponseHeader
	if isChunk(Response):
		if "\r\n0\r\n" in Response:
			return Response
		while 1:
			tmp = str(sock.recv(4096))
			if (tmp[0] == "0") or ("\n0\r\n" in tmp):
				break
			else:
				Response += tmp
		return Response
	elif "Content-Length:" in Response:
		content_pos = ResponseHeader.find("\r\n\r\n")+4
		content_len_rev = len(ResponseHeader[content_pos:])
		content_len = ResponseDatalength(ResponseHeader)
		length = content_len - content_len_rev
		if(length == 0):
			return Response
		while length != 0:
			tmp = sock.recv(4096)
			Response += tmp
			length -= len(tmp)
		return Response
	else:
		return ''

def isChunk(header):
	if "Transfer-Encoding: chunked" in header:
		return 1
	else:
		return 0


def ResponseDatalength(header):
	patternstr = "Content-Length: (.*?)\r\n"
	pattern = re.compile(patternstr)
	datalength = re.findall(pattern, header)
	return int(datalength[0])

def CheckCookie(data, Cookie):
	csrftoken = Cookie.csrftoken
	sessionid = Cookie.sessionid
	if "Set-Cookie: sessionid" in data:
		sessionid = getsessionid(data)
		Cookie.isCookie |= 1 
	if "Set-Cookie: csrftoken" in data:
		csrftoken = getcsrftoken(data)
		Cookie.isCookie |= 1
	Cookie.setCookie(csrftoken,sessionid)
	return

def matchSecretFlag(data):
	patternstr = secretFlagMatch
	pattern = re.compile(patternstr)
	secret_flag = re.findall(pattern, data)
	if not secret_flag:
		return 0
	return secret_flag[0]

def matchUrl(data):
	patternstr = ".*?<a href=\"/fakebook/(.*?)\">"
	pattern = re.compile(patternstr)
	url = re.findall(pattern, data)
	return url


def login(sock,myCookie):
	get(sock,'http://cs5700sp16.ccs.neu.edu/accounts/login/?next=/fakebook/',myCookie)
	data = RecvData(sock)
	CheckCookie(data,myCookie)
	postdata = 'username='+username+'&password='+password+'&csrfmiddlewaretoken='+myCookie.csrftoken
	post(sock,'http://cs5700sp16.ccs.neu.edu/accounts/login/?next=/fakebook/',postdata,data,myCookie)
	postres = RecvData(sock)
	CheckCookie(postres,myCookie)
	if(not isNorm(postres)):
	#
		if is302error(postres):
			get(sock, is302error(postres),myCookie)
			loginedData = RecvData(sock)
			print "loged in"
			return loginedData
		else:
			print "ERROR Response, Retry"
			return login(sock,myCookie)
	return postres
	



def main():
	begin = time.time()
	myCookie = Cookie()
	sock = createSocket()
	loginedData = login(sock,myCookie)
	secret_flag =[]
	VisitedUrl = []
	Url_Q = Queue.Queue()
	crawdata = loginedData
	urls = matchUrl(crawdata)
	for url in urls:
		Url_Q.put(url)
	urlhead = "http://cs5700sp16.ccs.neu.edu/fakebook/"
	index = 1
	while len(secret_flag)<5:
		url = Url_Q.get()
		if url not in VisitedUrl:
			get(sock,urlhead+url,myCookie)
			try:
				crawdata = RecvData(sock)
			except Exception, e:
				socket = createSocket()
				continue
			if "Connection: close" in crawdata:
				sock = createSocket()
				continue
			if isNorm(crawdata):
				print str(index) + ":" + url
				index += 1
				VisitedUrl.append(url)
				urls = matchUrl(crawdata)
				for url in urls:
					if(url not in VisitedUrl):
						Url_Q.put(url)
				flag = matchSecretFlag(crawdata)
				print "total flag" + str(secret_flag)
				if flag:
					secret_flag.append(flag)
			elif is403error(crawdata):

			else:
				sock = createSocket()
				print "ERROR"
				print crawdata
				continue
		else:
			continue
	sock.close()
	end= time.time()
	print "time"+ str(end - begin)
	for flag in secret_flag:
		print flag + '\n'

main()


